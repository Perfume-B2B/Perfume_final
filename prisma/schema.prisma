generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(cuid())
  username          String           @unique
  password          String?
  role              UserRole         @default(BUYER)
  isActive          Boolean          @default(true)
  customerId        String?
  clientRoleId      String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  auditLogs         AuditLog[]
  exportHistory     ExportHistory[]
  exportTemplates   ExportTemplate[]
  inventoryScans    InventoryScan[]  @relation("InventoryScanner")
  approvedOrders    Order[]          @relation("OrderApprover")
  orders            Order[]
  assignedPicklists Picklist[]       @relation("PicklistAssignee")
  posSessions       POSSession[]     @relation("POSOperator")
  posTransactions   POSTransaction[] @relation("POSTransactionUser")
  moderatedReviews  Review[]         @relation("ReviewModerator")
  accessUrl         UserAccessUrl?
  clientRole        ClientRole?      @relation(fields: [clientRoleId], references: [id])
  customer          Customer?        @relation(fields: [customerId], references: [id])

  @@index([username])
  @@index([customerId])
  @@index([clientRoleId])
  @@map("users")
}

model Product {
  id                   String          @id @default(cuid())
  name                 String
  brand                String
  content              String
  ean                  String          @unique
  purchasePrice        Decimal         @db.Decimal(10, 2)
  retailPrice          Decimal         @db.Decimal(10, 2)
  stockQuantity        Int             @default(0)
  maxOrderableQuantity Int?
  starRating           Int             @default(0)
  category             String?
  subcategory          String?
  description          String?
  tags                 String[]
  status               ProductStatus   @default(ACTIEF)
  isActive             Boolean         @default(true)
  barcode              String?
  location             String?
  importSessionId      String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  customerPrices       CustomerPrice[]
  inventoryScans       InventoryScan[]
  orderItems           OrderItem[]
  picklistItems        PicklistItem[]
  posItems             POSItem[]
  images               ProductImage[]
  reviews              Review[]

  @@index([brand])
  @@index([category])
  @@index([subcategory])
  @@index([ean])
  @@index([isActive])
  @@index([status])
  @@index([starRating])
  @@index([name])
  @@index([brand, category])
  @@index([isActive, starRating])
  @@index([status, isActive])
  @@index([createdAt])
  @@index([purchasePrice])
  @@index([retailPrice])
  @@index([stockQuantity])
  @@index([barcode])
  @@index([location])
  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  isMain    Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([isMain])
  @@map("product_images")
}

model Customer {
  id                 String                   @id @default(cuid())
  name               String
  email              String                   @unique
  phone              String?
  address            String?
  generalMargin      Decimal                  @default(0) @db.Decimal(5, 2)
  minimumOrderValue  Decimal                  @default(0) @db.Decimal(10, 2)
  minimumOrderItems  Int                      @default(0)
  isActive           Boolean                  @default(true)
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  customerDiscounts  CustomerDiscount[]
  hiddenCategories   CustomerHiddenCategory[]
  customerMargins    CustomerMargin[]
  customerPrices     CustomerPrice[]
  orders             Order[]
  posTransactions    POSTransaction[]
  promotionCustomers PromotionCustomer[]
  reviews            Review[]
  users              User[]
  volumeDiscounts    VolumeDiscount[]

  @@index([email])
  @@index([isActive])
  @@index([name])
  @@index([isActive, createdAt])
  @@index([generalMargin])
  @@map("customers")
}

model CustomerMargin {
  id         String   @id @default(cuid())
  customerId String
  category   String
  margin     Decimal  @db.Decimal(5, 2)
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, category])
  @@index([customerId])
  @@index([category])
  @@map("customer_margins")
}

model CustomerPrice {
  id         String   @id @default(cuid())
  customerId String
  productId  String
  price      Decimal  @db.Decimal(10, 2)
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([customerId, productId])
  @@index([customerId])
  @@index([productId])
  @@map("customer_prices")
}

model CustomerDiscount {
  id         String   @id @default(cuid())
  customerId String
  brand      String
  discount   Decimal  @db.Decimal(5, 2)
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, brand])
  @@index([customerId])
  @@index([brand])
  @@map("customer_discounts")
}

model CustomerHiddenCategory {
  id         String   @id @default(cuid())
  customerId String
  category   String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, category])
  @@index([customerId])
  @@map("customer_hidden_categories")
}

model VolumeDiscount {
  id                 String   @id @default(cuid())
  customerId         String
  minQuantity        Int
  maxQuantity        Int?
  discountPercentage Decimal  @db.Decimal(5, 2)
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  customer           Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([isActive])
  @@map("volume_discounts")
}

model Promotion {
  id                 String              @id @default(cuid())
  name               String
  description        String?
  discount           Decimal             @db.Decimal(5, 2)
  startDate          DateTime
  endDate            DateTime
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  promotionCustomers PromotionCustomer[]

  @@index([startDate])
  @@index([endDate])
  @@index([isActive])
  @@map("promotions")
}

model PromotionCustomer {
  id          String    @id @default(cuid())
  promotionId String
  customerId  String
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  promotion   Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  @@unique([promotionId, customerId])
  @@index([promotionId])
  @@index([customerId])
  @@map("promotion_customers")
}

model Order {
  id              String      @id @default(cuid())
  customerId      String
  userId          String
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @db.Decimal(10, 2)
  notes           String?
  approvedBy      String?
  approvedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]
  approvedUser    User?       @relation("OrderApprover", fields: [approvedBy], references: [id])
  customer        Customer    @relation(fields: [customerId], references: [id])
  user            User        @relation(fields: [userId], references: [id])
  picklist        Picklist?

  @@index([customerId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([customerId, status])
  @@index([status, createdAt])
  @@index([approvedBy])
  @@index([approvedAt])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String
  entityId  String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([entity])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([entity, entityId])
  @@index([action, createdAt])
  @@map("audit_logs")
}

model ImportHistory {
  id              String           @id @default(cuid())
  fileName        String
  fileType        String
  entityType      String
  totalRows       Int
  importedRows    Int
  failedRows      Int
  successfulRows  Int              @default(0)
  skippedRows     Int              @default(0)
  duplicateRows   Int              @default(0)
  importStrategy  String           @default("skip")
  importOnlyValid Boolean          @default(true)
  startedAt       DateTime         @default(now())
  completedAt     DateTime?
  duration        Int?
  status          String           @default("completed")
  warnings        Json?
  notes           String?
  errors          Json?
  importedBy      String
  createdAt       DateTime         @default(now())
  rollbacks       ImportRollback[]
  snapshots       ImportSnapshot[]

  @@index([entityType])
  @@index([importedBy])
  @@index([createdAt])
  @@index([status])
  @@index([entityType, createdAt])
  @@index([importedBy, createdAt])
  @@map("import_history")
}

model ImportSnapshot {
  id           String        @id @default(cuid())
  importId     String
  entityType   String
  snapshotData Json
  createdAt    DateTime      @default(now())
  import       ImportHistory @relation(fields: [importId], references: [id], onDelete: Cascade)

  @@index([importId])
  @@index([entityType])
  @@index([createdAt])
  @@map("import_snapshots")
}

model ImportRollback {
  id               String        @id @default(cuid())
  importId         String
  rolledBackBy     String
  entitiesRestored Int
  rollbackReason   String?
  createdAt        DateTime      @default(now())
  import           ImportHistory @relation(fields: [importId], references: [id], onDelete: Cascade)

  @@index([importId])
  @@index([rolledBackBy])
  @@index([createdAt])
  @@map("import_rollbacks")
}

model ImportBackup {
  id         String   @id @default(cuid())
  importId   String
  entityType String
  backupData Json
  createdAt  DateTime @default(now())

  @@index([importId])
  @@index([entityType])
  @@index([createdAt])
  @@map("import_backups")
}

model ExportHistory {
  id           String   @id @default(cuid())
  userId       String
  exportType   String
  exportFormat String
  fileName     String
  fileSize     Int?
  parameters   Json
  recordCount  Int
  errors       Json?
  status       String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([exportType])
  @@index([exportFormat])
  @@index([status])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([exportType, createdAt])
  @@map("export_history")
}

model ExportTemplate {
  id           String   @id @default(cuid())
  userId       String
  name         String
  description  String?
  exportType   String
  exportFormat String
  parameters   Json
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([exportType])
  @@index([exportFormat])
  @@index([isDefault])
  @@index([userId, exportType])
  @@map("export_templates")
}

model UserAccessUrl {
  id          String   @id @default(cuid())
  userId      String   @unique
  accessToken String   @unique
  expiresAt   DateTime
  isUsed      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([accessToken])
  @@index([expiresAt])
  @@index([isUsed])
  @@map("user_access_urls")
}

model Review {
  id              String       @id @default(cuid())
  productId       String
  customerId      String
  rating          Int
  title           String?
  comment         String
  status          ReviewStatus @default(PENDING)
  moderatedBy     String?
  moderatedAt     DateTime?
  rejectionReason String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  customer        Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  moderator       User?        @relation("ReviewModerator", fields: [moderatedBy], references: [id])
  product         Product      @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([customerId])
  @@index([status])
  @@index([rating])
  @@index([createdAt])
  @@index([productId, status])
  @@index([customerId, createdAt])
  @@map("reviews")
}

model Picklist {
  id           String         @id @default(cuid())
  orderId      String         @unique
  status       PicklistStatus @default(PENDING)
  assignedTo   String?
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  pickItems    PicklistItem[]
  assignedUser User?          @relation("PicklistAssignee", fields: [assignedTo], references: [id])
  order        Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([assignedTo])
  @@index([createdAt])
  @@map("picklists")
}

model PicklistItem {
  id         String         @id @default(cuid())
  picklistId String
  productId  String
  quantity   Int
  picked     Int            @default(0)
  status     PickItemStatus @default(PENDING)
  scannedAt  DateTime?
  pickedAt   DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  picklist   Picklist       @relation(fields: [picklistId], references: [id], onDelete: Cascade)
  product    Product        @relation(fields: [productId], references: [id])

  @@index([picklistId])
  @@index([productId])
  @@index([status])
  @@map("picklist_items")
}

model InventoryScan {
  id        String   @id @default(cuid())
  productId String
  scannedBy String
  quantity  Int
  location  String?
  notes     String?
  scannedAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  scanner   User     @relation("InventoryScanner", fields: [scannedBy], references: [id])

  @@index([productId])
  @@index([scannedBy])
  @@index([scannedAt])
  @@map("inventory_scans")
}

model ClientRole {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@map("client_roles")
}

model Integration {
  id         String   @id @default(cuid())
  platform   String   @unique
  isActive   Boolean  @default(false)
  apiKey     String?
  apiSecret  String?
  webhookUrl String?
  settings   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("integrations")
}

model Translation {
  id       String  @id @default(cuid())
  key      String
  language String
  value    String
  context  String?

  @@unique([key, language, context])
  @@index([key])
  @@index([language])
  @@map("translations")
}

model POSSession {
  id           String           @id @default(cuid())
  sessionId    String           @unique
  operatorId   String
  status       POSSessionStatus @default(ACTIVE)
  startTime    DateTime         @default(now())
  endTime      DateTime?
  totalAmount  Decimal          @default(0) @db.Decimal(10, 2)
  totalItems   Int              @default(0)
  notes        String?
  location     String?
  operator     User             @relation("POSOperator", fields: [operatorId], references: [id])
  transactions POSTransaction[]

  @@index([sessionId])
  @@index([operatorId])
  @@index([status])
  @@index([startTime])
  @@map("pos_sessions")
}

model POSTransaction {
  id            String               @id @default(cuid())
  transactionId String               @unique
  sessionId     String
  userId        String
  customerId    String?
  status        POSTransactionStatus @default(COMPLETED)
  subtotal      Decimal              @db.Decimal(10, 2)
  tax           Decimal              @default(0) @db.Decimal(10, 2)
  discount      Decimal              @default(0) @db.Decimal(10, 2)
  total         Decimal              @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus        @default(PAID)
  notes         String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  items         POSItem[]
  customer      Customer?            @relation(fields: [customerId], references: [id])
  session       POSSession           @relation(fields: [sessionId], references: [id])
  user          User                 @relation("POSTransactionUser", fields: [userId], references: [id])

  @@index([transactionId])
  @@index([sessionId])
  @@index([userId])
  @@index([customerId])
  @@index([status])
  @@index([paymentStatus])
  @@index([createdAt])
  @@map("pos_transactions")
}

model POSItem {
  id            String         @id @default(cuid())
  transactionId String
  productId     String
  quantity      Int
  unitPrice     Decimal        @db.Decimal(10, 2)
  totalPrice    Decimal        @db.Decimal(10, 2)
  discount      Decimal        @default(0) @db.Decimal(10, 2)
  notes         String?
  product       Product        @relation(fields: [productId], references: [id])
  transaction   POSTransaction @relation(fields: [transactionId], references: [id])

  @@index([transactionId])
  @@index([productId])
  @@map("pos_items")
}

enum UserRole {
  ADMIN
  BUYER
}

enum OrderStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum ProductStatus {
  CONCEPT
  ACTIEF
  NIET_BESCHIKBAAR
  VERVALLEN
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PicklistStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PickItemStatus {
  PENDING
  PICKED
  PARTIALLY_PICKED
  OUT_OF_STOCK
}

enum POSSessionStatus {
  ACTIVE
  PAUSED
  CLOSED
  CANCELLED
}

enum POSTransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  MOBILE_PAYMENT
  GIFT_CARD
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}
